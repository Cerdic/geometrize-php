<?php

// Generated by Haxe 3.4.7
class geometrize_bitmap__Rgba_Rgba_Impl_ {
	public function __construct(){}
	static function _new($rgba) {
		$this1 = $rgba;
		return $this1;
	}
	static function create($red, $green, $blue, $alpha) {
		if(!true) {
			throw new HException("FAIL: min <= max");
		}
		$tmp = null;
		if($red < 0) {
			$tmp = 0;
		} else {
			if($red > 255) {
				$tmp = 255;
			} else {
				$tmp = $red;
			}
		}
		if(!true) {
			throw new HException("FAIL: min <= max");
		}
		$tmp1 = null;
		if($green < 0) {
			$tmp1 = 0;
		} else {
			if($green > 255) {
				$tmp1 = 255;
			} else {
				$tmp1 = $green;
			}
		}
		if(!true) {
			throw new HException("FAIL: min <= max");
		}
		$tmp2 = null;
		if($blue < 0) {
			$tmp2 = 0;
		} else {
			if($blue > 255) {
				$tmp2 = 255;
			} else {
				$tmp2 = $blue;
			}
		}
		if(!true) {
			throw new HException("FAIL: min <= max");
		}
		$tmp3 = null;
		if($alpha < 0) {
			$tmp3 = 0;
		} else {
			if($alpha > 255) {
				$tmp3 = 255;
			} else {
				$tmp3 = $alpha;
			}
		}
		return ($tmp << 24) + ($tmp1 << 16) + ($tmp2 << 8) + $tmp3;
	}
	static function fromInt($rgba) {
		return $rgba;
	}
	static function get_r($this1) {
		return $this1 >> 24 & 255;
	}
	static function get_g($this1) {
		return $this1 >> 16 & 255;
	}
	static function get_b($this1) {
		return $this1 >> 8 & 255;
	}
	static function get_a($this1) {
		return $this1 & 255;
	}
	static $__properties__ = array("get_a" => "get_a","get_b" => "get_b","get_g" => "get_g","get_r" => "get_r");
	function __toString() { return 'geometrize.bitmap._Rgba.Rgba_Impl_'; }
}
