<?php

// Generated by Haxe 3.4.7
class geometrize_bitmap_Bitmap {
	public $width;
	public $height;
	public $data;
	public $errorCache;

	public function __construct(){
		$this->data = [];
	}

	public function getPixel($x, $y){
		return $this->data[$this->width*$y+$x];
	}

	public function setPixel($x, $y, $color){
		$this->data[$this->width*$y+$x] = $color;
	}

	public function length() {
		return $this->width * $this->height;
	}

	public function hclone(){
		$bitmap = new geometrize_bitmap_Bitmap();
		$bitmap->width = $this->width;
		$bitmap->height = $this->height;
		$bitmap->data = $this->data;
		if (isset($this->errorCache)) {
			$bitmap->errorCache = $this->errorCache;
		}
		return $bitmap;
	}

	public function fill($color){
		$idx = 0;
		$n = $this->width * $this->height;
		while ($idx<$n){
			$this->data[$idx] = $color;
			$idx++;
		}
	}

	public function __call($m, $a){
		if (isset($this->$m) && is_callable($this->$m)){
			return call_user_func_array($this->$m, $a);
		} else {
			if (isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m])){
				return call_user_func_array($this->__dynamics[$m], $a);
			} else {
				if ('toString'==$m){
					return $this->__toString();
				} else {
					throw new HException('Unable to call <' . $m . '>');
				}
			}
		}
	}


	public static function create($w, $h, $color){
		$bitmap = new geometrize_bitmap_Bitmap();
		$bitmap->width = $w;
		$bitmap->height = $h;
		$bitmap->fill($color);
		return $bitmap;
	}

	public static function createFromImageFile($file){
		list($w, $h) = getimagesize($file);
		$image = imagecreatefromstring(file_get_contents($file));

		$bitmap = new geometrize_bitmap_Bitmap();
		$bitmap->width = $w;
		$bitmap->height = $h;

		for ($y = 0; $y<$h; $y++){
			$l = $w * $y;
			for ($x = 0; $x<$w; $x++){
				// get a color
				$color_index = imagecolorat($image, $x, $y);
				// make it human readable
				$c = imagecolorsforindex($image, $color_index);
				$bitmap->data[$l+$x] = geometrize_bitmap_Bitmap::colorFromRGBAArray($c);
			}
		}

		return $bitmap;
	}

	public static function colorFromRGBAArray($c){
		if (isset($c['alpha'])){
			// in RGBA 0 = opaque, 127 = transparent
			// in geometrize 0 = transparent, 255 = opaque
			$c['alpha'] = round((127-$c['alpha'])*255/127);
		} else {
			$c['alpha'] = 255;
		}
		$color = ($c['red'] << 24) + ($c['green'] << 16) + ($c['blue'] << 8) + $c['alpha'];
		return $color;
	}


	function __toString(){
		return 'geometrize.bitmap.Bitmap';
	}
}
