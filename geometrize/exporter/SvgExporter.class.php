<?php

// Generated by Haxe 3.4.7
class geometrize_exporter_SvgExporter {
	public function __construct(){
	}

	static $SVG_STYLE_HOOK = "::svg_style_hook::";

	static function export($shapes, $width, $height){
		$results = geometrize_exporter_SvgExporter::getSvgPrelude();
		$results = _hx_string_or_null($results) . _hx_string_or_null(geometrize_exporter_SvgExporter::getSvgNodeOpen($width, $height));
		$results = _hx_string_or_null($results) . _hx_string_or_null(geometrize_exporter_SvgExporter::exportShapes($shapes));
		$results = _hx_string_or_null($results) . _hx_string_or_null(geometrize_exporter_SvgExporter::getSvgNodeClose());
		return $results;
	}

	static function exportShapes($shapes){
		$results = "";
		{
			$_g1 = 0;
			$_g = $shapes->length;
			while ($_g1<$_g){
				$_g1 = $_g1+1;
				$i = $_g1-1;
				$results = _hx_string_or_null($results) . _hx_string_or_null(geometrize_exporter_SvgExporter::exportShape($shapes[$i]));
				if ($i!==$shapes->length-1){
					$results = _hx_string_or_null($results) . "\x0A";
				}
				unset($i);
			}
		}
		return $results;
	}

	static function exportShape($shape){
		$s = $shape->shape->getSvgShapeData();
		$sub = geometrize_exporter_SvgExporter::$SVG_STYLE_HOOK;
		$by = geometrize_exporter_SvgExporter::stylesForShape($shape);
		if ($sub===""){
			return implode(str_split($s), $by);
		} else {
			return str_replace($sub, $by, $s);
		}
	}

	static function getSvgPrelude(){
		return "<?xml version=\"1.0\" standalone=\"no\"?>\x0A";
	}

	static function getSvgNodeOpen($width, $height){
		return "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.2\" baseProfile=\"tiny\" width=\"" . _hx_string_rec($width, "") . "\" height=\"" . _hx_string_rec($height, "") . "\">\x0A";
	}

	static function getSvgNodeClose(){
		return "</svg>";
	}

	static function stylesForShape($shape){
		$_g = $shape->shape->getType();
		switch ($_g) {
			case 6:
			case 7:
				{
					$tmp = _hx_string_or_null(geometrize_exporter_SvgExporter::strokeForColor($shape->color)) . " stroke-width=\"1\" fill=\"none\" ";
					return _hx_string_or_null($tmp) . _hx_string_or_null(geometrize_exporter_SvgExporter::strokeOpacityForAlpha($shape->color & 255));
				}
				break;
			default:
				{
					$tmp1 = _hx_string_or_null(geometrize_exporter_SvgExporter::fillForColor($shape->color)) . " ";
					return _hx_string_or_null($tmp1) . _hx_string_or_null(geometrize_exporter_SvgExporter::fillOpacityForAlpha($shape->color & 255));
				}
				break;
		}
	}

	static function rgbForColor($color){
		return "rgb(" . _hx_string_rec(($color >> 24 & 255), "") . "," . _hx_string_rec(($color >> 16 & 255), "") . "," . _hx_string_rec(($color >> 8 & 255), "") . ")";
	}

	static function strokeForColor($color){
		return "stroke=\"" . _hx_string_or_null(geometrize_exporter_SvgExporter::rgbForColor($color)) . "\"";
	}

	static function fillForColor($color){
		return "fill=\"" . _hx_string_or_null(geometrize_exporter_SvgExporter::rgbForColor($color)) . "\"";
	}

	static function fillOpacityForAlpha($alpha){
		return "fill-opacity=\"" . _hx_string_rec($alpha/255.0, "") . "\"";
	}

	static function strokeOpacityForAlpha($alpha){
		return "stroke-opacity=\"" . _hx_string_rec($alpha/255.0, "") . "\"";
	}

	function __toString(){
		return 'geometrize.exporter.SvgExporter';
	}
}
