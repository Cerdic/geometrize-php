<?php

// Generated by Haxe 3.4.7
class geometrize_shape_Circle extends geometrize_shape_Ellipse {
	public function __construct($xBound, $yBound){
		parent::__construct($xBound, $yBound);
		$this->rx = mt_rand(1, 32);
		$this->ry = $this->rx;
	}

	public function mutate(){
		$r = mt_rand(0, 1);
		switch ($r) {
			case 0:
				{
					$value = $this->x;
					if (!true){
						throw new HException("FAIL: lower <= upper");
					}
					$value1 = $value+mt_rand(-16, +16);
					$max = $this->xBound-1;
					if (!(0<=$max)){
						throw new HException("FAIL: min <= max");
					}
					$tmp = null;
					if ($value1<0){
						$tmp = 0;
					} else {
						if ($value1>$max){
							$tmp = $max;
						} else {
							$tmp = $value1;
						}
					}
					$this->x = $tmp;
					$value2 = $this->y;
					if (!true){
						throw new HException("FAIL: lower <= upper");
					}
					$value3 = $value2+mt_rand(-16, +16);
					$max1 = $this->yBound-1;
					if (!(0<=$max1)){
						throw new HException("FAIL: min <= max");
					}
					$tmp1 = null;
					if ($value3<0){
						$tmp1 = 0;
					} else {
						if ($value3>$max1){
							$tmp1 = $max1;
						} else {
							$tmp1 = $value3;
						}
					}
					$this->y = $tmp1;
				}
				break;
			case 1:
				{
					$value4 = $this->rx;
					if (!true){
						throw new HException("FAIL: lower <= upper");
					}
					$value5 = $value4+mt_rand(-16, +16);
					$max2 = $this->xBound-1;
					if (!(1<=$max2)){
						throw new HException("FAIL: min <= max");
					}
					$r1 = null;
					if ($value5<1){
						$r1 = 1;
					} else {
						if ($value5>$max2){
							$r1 = $max2;
						} else {
							$r1 = $value5;
						}
					}
					$this->rx = $r1;
					$this->ry = $r1;
				}
				break;
		}
	}

	public function hclone(){
		$circle = new geometrize_shape_Circle($this->xBound, $this->yBound);
		$circle->x = $this->x;
		$circle->y = $this->y;
		$circle->rx = $this->rx;
		$circle->ry = $this->ry;
		$circle->color = $this->color;

		return $circle;
	}

	public function getType(){
		return geometrize_shape_ShapeTypes::T_CIRCLE;
	}

	public function getRawShapeData(){
		return [
			$this->x,
			$this->y,
			$this->rx
		];
	}

	public function getSvgShapeData(){
		return "<circle cx=\"" . $this->x . "\" cy=\"" . $this->y . "\" r=\"" . $this->rx . "\" " . geometrize_exporter_SvgExporter::$SVG_STYLE_HOOK . " />";
	}

	function __toString(){
		return 'geometrize.shape.Circle';
	}
}
