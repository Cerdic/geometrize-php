<?php

// Generated by Haxe 3.4.7
class geometrize_shape_ShapeFactory {
	public function __construct(){}
	static function create($type, $xBound, $yBound) {
		switch($type) {
		case 0:{
			return new geometrize_shape_Rectangle($xBound, $yBound);
		}break;
		case 1:{
			return new geometrize_shape_RotatedRectangle($xBound, $yBound);
		}break;
		case 2:{
			return new geometrize_shape_Triangle($xBound, $yBound);
		}break;
		case 3:{
			return new geometrize_shape_Ellipse($xBound, $yBound);
		}break;
		case 4:{
			return new geometrize_shape_RotatedEllipse($xBound, $yBound);
		}break;
		case 5:{
			return new geometrize_shape_Circle($xBound, $yBound);
		}break;
		case 6:{
			return new geometrize_shape_Line($xBound, $yBound);
		}break;
		case 7:{
			return new geometrize_shape_QuadraticBezier($xBound, $yBound);
		}break;
		}
	}
	static function randomShape($xBound, $yBound) {
		$a = (new _hx_array(array(0, 1, 2, 3, 4, 5, 6, 7)));
		$tmp = null;
		if($a !== null) {
			$tmp = $a->length > 0;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			throw new HException("FAIL: a != null && a.length > 0");
		}
		$upper = $a->length - 1;
		if(!(0 <= $upper)) {
			throw new HException("FAIL: lower <= upper");
		}
		return geometrize_shape_ShapeFactory::create($a[Math::floor(($upper + 1) * Math::random())], $xBound, $yBound);
	}
	static function randomShapeOf($types, $xBound, $yBound) {
		$tmp = null;
		if($types !== null) {
			$tmp = $types->length > 0;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			throw new HException("FAIL: a != null && a.length > 0");
		}
		$upper = $types->length - 1;
		if(!(0 <= $upper)) {
			throw new HException("FAIL: lower <= upper");
		}
		return geometrize_shape_ShapeFactory::create($types[Math::floor(($upper + 1) * Math::random())], $xBound, $yBound);
	}
	function __toString() { return 'geometrize.shape.ShapeFactory'; }
}
