<?php

// Generated by Haxe 3.4.7
class geometrize_rasterizer_Scanline {
	public function __construct($y, $x1, $x2) {
		if(!php_Boot::$skip_constructor) {
		$this->y = $y;
		$this->x1 = $x1;
		$this->x2 = $x2;
	}}
	public $y;
	public $x1;
	public $x2;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function trim($scanlines, $w, $h) {
		if(!($scanlines !== null)) {
			throw new HException("FAIL: scanlines != null");
		}
		$w1 = $w;
		$h1 = $h;
		return $scanlines->filter(array(new _hx_lambda(array(&$h1, &$w1), "geometrize_rasterizer_Scanline_0"), 'execute'));
	}
	static function trimHelper($line, $w, $h) {
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		if($line->y >= 0) {
			$tmp2 = $line->y >= $h;
		} else {
			$tmp2 = true;
		}
		if(!$tmp2) {
			$tmp1 = $line->x1 >= $w;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $line->x2 < 0;
		} else {
			$tmp = true;
		}
		if($tmp) {
			return false;
		}
		$value = $line->x1;
		$max = $w - 1;
		if(!(0 <= $max)) {
			throw new HException("FAIL: min <= max");
		}
		$tmp3 = null;
		if($value < 0) {
			$tmp3 = 0;
		} else {
			if($value > $max) {
				$tmp3 = $max;
			} else {
				$tmp3 = $value;
			}
		}
		$line->x1 = $tmp3;
		$value1 = $line->x2;
		$max1 = $w - 1;
		if(!(0 <= $max1)) {
			throw new HException("FAIL: min <= max");
		}
		$tmp4 = null;
		if($value1 < 0) {
			$tmp4 = 0;
		} else {
			if($value1 > $max1) {
				$tmp4 = $max1;
			} else {
				$tmp4 = $value1;
			}
		}
		$line->x2 = $tmp4;
		return $line->x1 <= $line->x2;
	}
	function __toString() { return 'geometrize.rasterizer.Scanline'; }
}
function geometrize_rasterizer_Scanline_0(&$h1, &$w1, $a1) {
	{
		return geometrize_rasterizer_Scanline::trimHelper($a1, $w1, $h1);
	}
}
