<?php

// Generated by Haxe 3.4.7
class geometrize_Core {

	/**
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $current
	 * @param array $lines
	 * @param int $alpha
	 * @return int
	 * @throws HException
	 */
	static function computeColor($target, $current, $lines, $alpha){
		if (!($target!==null)){
			throw new HException("FAIL: target != null");
		}
		if (!($current!==null)){
			throw new HException("FAIL: current != null");
		}
		if (!($lines!==null)){
			throw new HException("FAIL: lines != null");
		}
		if (!($alpha>=0)){
			throw new HException("FAIL: alpha >= 0");
		}
		$totalRed = 0;
		$totalGreen = 0;
		$totalBlue = 0;
		$count = 0;
		$f = 65535/$alpha;
		$a = intval($f);

		foreach($lines as $line){
			$y = $line['y'];
			for ($x=$line['x1']; $x<=$line['x2']; $x++) {
				$t = $target->data[$y][$x];
				$c = $current->data[$y][$x];
				$totalRed = $totalRed+((($t >> 24 & 255)-($c >> 24 & 255))*$a+($c >> 24 & 255)*257);
				$totalGreen = $totalGreen+((($t >> 16 & 255)-($c >> 16 & 255))*$a+($c >> 16 & 255)*257);
				$totalBlue = $totalBlue+((($t >> 8 & 255)-($c >> 8 & 255))*$a+($c >> 8 & 255)*257);
				$count++;
			}
		}

		if ($count===0){
			return 0;
		}
		$value = intval($totalRed/$count) >> 8;
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$r = null;
		if ($value<0){
			$r = 0;
		} else {
			if ($value>255){
				$r = 255;
			} else {
				$r = $value;
			}
		}
		$value1 = intval($totalGreen/$count) >> 8;
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$g = null;
		if ($value1<0){
			$g = 0;
		} else {
			if ($value1>255){
				$g = 255;
			} else {
				$g = $value1;
			}
		}
		$value2 = intval($totalBlue/$count) >> 8;
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$b = null;
		if ($value2<0){
			$b = 0;
		} else {
			if ($value2>255){
				$b = 255;
			} else {
				$b = $value2;
			}
		}
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$tmp = null;
		if ($r<0){
			$tmp = 0;
		} else {
			if ($r>255){
				$tmp = 255;
			} else {
				$tmp = $r;
			}
		}
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$tmp1 = null;
		if ($g<0){
			$tmp1 = 0;
		} else {
			if ($g>255){
				$tmp1 = 255;
			} else {
				$tmp1 = $g;
			}
		}
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$tmp2 = null;
		if ($b<0){
			$tmp2 = 0;
		} else {
			if ($b>255){
				$tmp2 = 255;
			} else {
				$tmp2 = $b;
			}
		}
		if (!true){
			throw new HException("FAIL: min <= max");
		}
		$tmp3 = null;
		if ($alpha<0){
			$tmp3 = 0;
		} else {
			if ($alpha>255){
				$tmp3 = 255;
			} else {
				$tmp3 = $alpha;
			}
		}
		return ($tmp << 24)+($tmp1 << 16)+($tmp2 << 8)+$tmp3;
	}

	/**
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $current
	 * @return int
	 * @throws HException
	 */
	static function differenceFull($target, $current){

		$actual = $target->width;
		$expected = $current->width;
		if ($actual!==$expected){
			throw new HException("FAIL: values are not equal (expected: " . _hx_string_rec($expected, "") . ", actual: " . _hx_string_rec($actual, "") . ")");
		}
		$actual1 = $target->height;
		$expected1 = $current->height;
		if ($actual1!==$expected1){
			throw new HException("FAIL: values are not equal (expected: " . _hx_string_rec($expected1, "") . ", actual: " . _hx_string_rec($actual1, "") . ")");
		}

		$current->errorCache = [];
		$total = 0;
		$width = $target->width;
		$height = $target->height;
		for ($y = 0; $y<$height; $y++){
			for ($x = 0; $x<$width; $x++){
				$f = $target->data[$y][$x];
				$s = $current->data[$y][$x];
				$dr = ($f >> 24 & 255)-($s >> 24 & 255);
				if ($dr<0){
					$dr *= -1;
				}
				$dg = ($f >> 16 & 255)-($s >> 16 & 255);
				if ($dg<0){
					$dg *= -1;
				}
				$db = ($f >> 8 & 255)-($s >> 8 & 255);
				if ($db<0){
					$db *= -1;
				}
				$da = ($f & 255)-($s & 255);
				if ($da<0){
					$da *= -1;
				}
				$total += ($current->errorCache[$y][$x] = $dr+$dg+$db+$da);
			}
		}
		return $total;
	}

	/**
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $before
	 * @param geometrize_bitmap_Bitmap $after
	 * @param int $score
	 * @param array $lines
	 * @param null|int $bestScore
	 * @return int
	 */
	static function differencePartial($target, $before, $after, $score, $lines, $bestScore = null){

		$total = $score;
		foreach ($lines as &$line) {
			$y = $line['y'];
			for ($x = $line['x1']; $x<=$line['x2']; $x++){
				$t = $target->data[$y][$x];
				if (!isset($before->errorCache[$y][$x])){
					$b = $before->data[$y][$x];
					$dtbr = ($t >> 24 & 255)-($b >> 24 & 255);
					if ($dtbr<0){
						$dtbr *= -1;
					}
					$dtbg = ($t >> 16 & 255)-($b >> 16 & 255);
					if ($dtbg<0){
						$dtbg *= -1;
					}
					$dtbb = ($t >> 8 & 255)-($b >> 8 & 255);
					if ($dtbb<0){
						$dtbb *= -1;
					}
					$dtba = ($t & 255)-($b & 255);
					if ($dtba<0){
						$dtba *= -1;
					}
					$before->errorCache[$y][$x] = $dtbr+$dtbg+$dtbb+$dtba;
				}
				$total = $total-$before->errorCache[$y][$x];
			}
		}
		if (!is_null($bestScore) && $total>$bestScore){
			return $total;
		}

		foreach ($lines as &$line) {
			$y = $line['y'];
			for ($x = $line['x1']; $x<=$line['x2']; $x++){
				$t = $target->data[$y][$x];
				$a = $after->data[$y][$x];

				$dtar = ($t >> 24 & 255)-($a >> 24 & 255);
				if ($dtar<0){
					$dtar *= -1;
				}
				$dtag = ($t >> 16 & 255)-($a >> 16 & 255);
				if ($dtag<0){
					$dtag *= -1;
				}
				$dtab = ($t >> 8 & 255)-($a >> 8 & 255);
				if ($dtab<0){
					$dtab *= -1;
				}
				$dtaa = ($t & 255)-($a & 255);
				if ($dtaa<0){
					$dtaa *= -1;
				}
				$total = $total+($dtar+$dtag+$dtab+$dtaa);
			}
			if (!is_null($bestScore) && $total>$bestScore){
				return $total;
			}
		}

		return $total;
	}

	/**
	 * @param array $shapes
	 * @param int $alpha
	 * @param int $nRandom
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $current
	 * @param geometrize_bitmap_Bitmap $buffer
	 * @param int $lastScore
	 * @return geometrize_State
	 * @throws HException
	 */
	static function bestRandomState($shapes, $alpha, $nRandom, $target, $current, $buffer, $lastScore){
		$bestEnergy = null;
		$bestState = null;

		$nRandom = max($nRandom, 1);

		for ($i = 0; $i<$nRandom; $i++){
			$state = new geometrize_State(geometrize_shape_ShapeFactory::randomShapeOf($shapes, $current->width, $current->height), $alpha, $target, $current, $buffer);
			$energy = $state->energy($lastScore, $bestEnergy);
			if (is_null($bestEnergy) || $energy<$bestEnergy){
				$bestEnergy = $energy;
				$bestState = $state;
			}
		}

		return $bestState;
	}

	/**
	 * @param array $shapes
	 * @param int $alpha
	 * @param int $nRandom
	 * @param int $maxMutationAge
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $current
	 * @param geometrize_bitmap_Bitmap $buffer
	 * @param int $lastScore
	 * @return geometrize_State
	 * @throws HException
	 */
	static function bestHillClimbState($shapes, $alpha, $nRandom, $maxMutationAge, $target, $current, $buffer, $lastScore){
		$state = geometrize_Core::bestRandomState($shapes, $alpha, $nRandom, $target, $current, $buffer, $lastScore);
		$state = geometrize_Core::hillClimb($state, $maxMutationAge, $lastScore);
		return $state;
	}

	/**
	 * @param geometrize_State $state
	 * @param int $maxAge
	 * @param int $lastScore
	 * @return geometrize_State
	 * @throws HException
	 */
	static function hillClimb($state, $maxAge, $lastScore){
		if (!($state!==null)){
			throw new HException("FAIL: state != null");
		}
		if (!($maxAge>=0)){
			throw new HException("FAIL: maxAge >= 0");
		}
		$state1 = clone $state;
		$bestState = clone $state1;
		$bestEnergy = $state1->energy($lastScore);
		$age = 0;
		while ($age<$maxAge){
			$undo = $state1->mutate();
			$energy = $state1->energy($lastScore, $bestEnergy);
			if ($energy>=$bestEnergy){
				$state1 = $undo;
			} else {
				$bestEnergy = $energy;
				$bestState = clone $state1;
				$age = -1;
			}
			$age = $age+1;
			unset($undo, $energy);
		}
		return $bestState;
	}

	/**
	 * @param geometrize_shape_Shape $shape
	 * @param int $alpha
	 * @param geometrize_bitmap_Bitmap $target
	 * @param geometrize_bitmap_Bitmap $current
	 * @param geometrize_bitmap_Bitmap $buffer
	 * @param int $score
	 * @param null|int $bestScore
	 * @return int
	 * @throws HException
	 */
	static function energy(&$shape, $alpha, $target, $current, $buffer, $score, $bestScore = null){
		if (!($shape!==null)){
			throw new HException("FAIL: shape != null");
		}
		if (!($target!==null)){
			throw new HException("FAIL: target != null");
		}
		if (!($current!==null)){
			throw new HException("FAIL: current != null");
		}
		if (!($buffer!==null)){
			throw new HException("FAIL: buffer != null");
		}
		$lines = $shape->rasterize();
		if (!isset($shape->color)){
			$shape->color = geometrize_Core::computeColor($target, $current, $lines, $alpha);
		}
		// copyLines only if opacity!=1 (speed issue with no transparency in shapes)
		if ($shape->color & 255!==255){
			geometrize_rasterizer_Rasterizer::copyLines($buffer, $current, $lines);
		}
		geometrize_rasterizer_Rasterizer::drawLines($buffer, $shape->color, $lines);
		return geometrize_Core::differencePartial($target, $current, $buffer, $score, $lines, $bestScore);
	}

	function __toString(){
		return 'geometrize.Core';
	}
}
